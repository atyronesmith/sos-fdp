- import_playbook: common.yaml

- hosts: all
  gather_facts: no

  vars:
    pstate: "{{ state | default('present' )}}"

  tasks:
  # A build a list of worker nodes to add
  - name: Build worker list
    set_fact:       
      worker_list: "{{ worker_list | default([]) + [ os_compute_server_name + '-' + index | string ] }}"
    loop: "{{ range(os_compute_nodes_number) | list }}"
    loop_control:
      index_var: index

  # Create the SDN/primary port for each worker node
  - name: 'Create the Compute ports'
    os_port:
      state: "{{ pstate }}"
      name: "{{ item }}-{{ index }}"
      network: "{{ os_network }}"
      security_groups:
      - "{{ os_sg_worker }}"
      allowed_address_pairs:
      - ip_address: "{{ os_ingressVIP }}"
    loop: "{{ [os_port_worker] * os_compute_nodes_number }}"
    loop_control:
      index_var: index
    register: ports

  # Tag each SDN/primary port with cluster name
  - name: 'Set Compute ports tag'
    command:
      cmd: "openstack port set --tag {{ cluster_id_tag }} {{ item }}-{{ index }}"
    loop: "{{ [os_port_worker] * os_compute_nodes_number }}"
    loop_control:
      index_var: index
    when: pstate == 'present'

  # Ensure that each network specified in additionalNetworks exists
  - name: Verify additionalNetworks
    os_networks_info:
      name: "{{ item.id }}"
    loop: "{{ additionalNetworks }}"
    register: result


  # Expand additionalNetworks by the count parameter in each network definition
  - name: Build port and port index list
    set_fact:
      port_list: "{{ port_list | default([]) + [ { 
                      'net_name' : item.id,
                      'uuid' : result.results[index].openstack_networks[0].id, 
                      'type' : item.type|default('normal')
                      } ] * item.count|default(1) }}"
      index_list: "{{ index_list | default([]) + range(item.count|default(1)) | list }}"
    loop: "{{ additionalNetworks }}"
    loop_control:
      index_var: index

  # Calculate and save the name of the port
  # The format of the name is cluster_name-worker-workerID-networkUUID(partial)-count
  # i.e. fdp-nz995-worker-1-99bcd111-1
  - name: Save port name
    set_fact:
      port_name_list: "{{ port_name_list | default([]) + [ item | combine( {'name' : item.uuid | regex_search('([^-]+)') + '-' + index_list[index]|string } ) ] }}" 
    loop: "{{ port_list }}"
    loop_control:
      index_var: index

  # Create the additional ports in OpenSTack  
  - name: Create additionalNetworks ports
    os_port:
      name:  "{{ item[0] }}-{{ item[1].name }}"
      vnic_type: "{{ item[1].type }}"
      network: "{{ item[1].uuid }}" 
      state: "{{ pstate }}"
      security_groups: "{{ os_sg_worker if item[1].type == 'normal' else omit }}"
    loop: "{{ worker_list | product(port_name_list) | list }}"
    loop_control:
      index_var: index

  # Tag the ports with the cluster info
  - name: 'Set additionalNetworks ports tag'
    command:
      cmd: "openstack port set --tag {{ cluster_id_tag }} {{ item[0] }}-{{ item[1].name }}"
    loop: "{{ worker_list | product(port_name_list) | list }}"
    when: pstate == 'present' 

  # Build the nic list to use for server create
  - name: Build nic list
    set_fact:
      nic_list: "{{ nic_list | default([]) + [ item.name ] }}"
    loop: "{{ port_name_list }}"

  # Create the servers
  - name: 'Create the Compute servers'
    os_server:
      state: "{{ pstate }}"
      name: "{{ item }}"
      image: "{{ os_image_rhcos }}"
      flavor: "{{ os_flavor_worker }}"
      auto_ip: no
      userdata: "{{ lookup('file', os_user_data) | string }}"
      nics:  "{{ [item] | product(nic_list) | map('join','-') | map('regex_replace', '(.*)', 'port-name=\\1') | list + [ 'port-name=' + item ] | reverse | list}}"
      config_drive: yes
    loop: "{{ worker_list }}"
    loop_control:
      index_var: index
