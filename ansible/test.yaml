- import_playbook: common.yaml

- hosts: all
  gather_facts: no

  tasks:
  # Build a list of worker nodes with indexes
  - name: Build worker list
    set_fact:       
      worker_list: "{{ worker_list | default([]) + [ item.1 + '-' + item.0 | string ] }}"
    with_indexed_items: "{{ [os_port_worker] * os_compute_nodes_number }}"

  # Create the SDN/primary port for each worker node
  - name: 'Create the Compute ports'
    os_port:
      name: "{{ item }}"
      network: "{{ os_network }}"
      security_groups:
      - "{{ os_sg_worker }}"
      allowed_address_pairs:
      - ip_address: "{{ os_ingressVIP }}"
    with_items: "{{ worker_list }}"
    register: ports

  # Tag each SDN/primary port with cluster name
  - name: 'Set Compute ports tag'
    command:
      cmd: "openstack port set --tag {{ cluster_id_tag }} {{ item }}"
    with_items: "{{ worker_list }}"  

  # Ensure that each network specified in additionalNetworks exists
  - name: Verify additionalNetworks
    os_networks_info:
      name: "{{ item.id }}"
    with_items: "{{ additionalNetworks }}"
    register: result

  # Expand additionalNetworks by the count parameter in each network definition
  - name: Build port and port index list for additionalNetworks
    set_fact:
      port_list: "{{ port_list | default([]) + [ { 
                      'net_name' : item.1.id,
                      'uuid' : result.results[item.0].openstack_networks[0].id, 
                      'type' : item.1.type|default('normal')
                      } ] * item.1.count|default(1) }}"
      index_list: "{{ index_list | default([]) + range(item.1.count|default(1)) | list }}"
    with_indexed_items: "{{ additionalNetworks }}"

  # Calculate and save the name of the port
  # The format of the name is cluster_name-worker-workerID-networkUUID(partial)-count
  # i.e. fdp-nz995-worker-1-99bcd111-1
  - name: Save port name
    set_fact:
      port_name_list: "{{ port_name_list | default([]) + [ item.1 | combine( {'name' : item.1.uuid | regex_search('([^-]+)') + '-' + index_list[item.0]|string } ) ] }}" 
    with_indexed_items: "{{ port_list }}"

  # Create the additional ports in OpenSTack  
  - name: Create additionalNetworks ports
    os_port:
      name:  "{{ item.0 }}-{{ item.1.name }}"
      vnic_type: "{{ item.1.type }}"
      network: "{{ item.1.uuid }}" 
      security_groups: "{{ os_sg_worker if item.1.type == 'normal' else omit }}"
    with_nested:
      - "{{ worker_list }}"
      - "{{ port_name_list }}"

  # Tag the ports with the cluster info
  - name: 'Set additionalNetworks ports tag'
    command:
      cmd: "openstack port set --tag {{ cluster_id_tag }} {{ item.0 }}-{{ item.1.name }}"
    with_nested: 
      - "{{ worker_list }}"
      - "{{ port_name_list }}"

  # Build the nic list to use for server create
  - name: Build nic list
    set_fact:
      nic_list: "{{ nic_list | default([]) + [ item.name ] }}"
    with_items: "{{ port_name_list }}"

  # Create the servers
  - name: 'Create the Compute servers'
    vars:
      worker_nics: "{{ [ item.1 + '-' + item.0 | string ] | product(nic_list) | map('join','-') | map('regex_replace', '(.*)', 'port-name=\\1') | list }}"
    os_server:
      name: "{{ item.1 }}-{{ item.0 }}"
      image: "{{ os_image_rhcos }}"
      flavor: "{{ os_flavor_worker }}"
      auto_ip: no
      userdata: "{{ lookup('file', 'worker.ign') | string }}"
      nics:  "{{ [ 'port-name=' + os_port_worker + '-' + item.0|string ] + worker_nics }}"
      config_drive: yes
    with_indexed_items: "{{ [os_compute_server_name] * os_compute_nodes_number }}"
